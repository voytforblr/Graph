import java.util.ArrayList;

public class Main {
    public static void main(String[] args) {
        Graph theGraph = new Graph();
        theGraph.addVertex('A'); // 0 (исходная вершина)
        theGraph.addVertex('B'); // 1
        theGraph.addVertex('C'); // 2
        theGraph.addVertex('D'); // 3
        theGraph.addVertex('E'); // 4
        theGraph.addVertex('F'); // 5


        theGraph.addEdge(0,1,4);
        theGraph.addEdge(0,2,2);
        theGraph.addEdge(1,2,5);
        theGraph.addEdge(2,4,3);
        theGraph.addEdge(1,3,10);
        theGraph.addEdge(4,3,4);
        theGraph.addEdge(3,5,11);

        theGraph.showAllPathes(0,5);
        theGraph.showMaxPath(0,5);
        theGraph.showMinPath(0,5);
        System.out.println("Центр "+theGraph.center());

    }
}


class Graph {
    private ArrayList<Vertex> vertexList;
    private int start;
    private int finish;
    private String path="";
    private int distans=0;
    private boolean flag=false;
    private ArrayList<Pathes> pathesList;
    private final int INF=10000;
    private boolean hascycle=false;

    public Graph() {
        vertexList = new ArrayList<>();
        pathesList= new ArrayList<>();
    }
    public void addVertex(char label){
        vertexList.add(new Vertex(label));
    }
    public void addEdge(int start,int end,int distance){
        vertexList.get(start).ConnectedDirPars.add(new DistPar(vertexList.get(end),distance));
    }
    public  void  showAllPathes(int start, int finish){
        findPathes(start,finish);
        for(int i=1;i<pathesList.size();i++) {
            for (int r = 0; r < pathesList.size() - i; r++) {
                if (pathesList.get(r).distance > pathesList.get(r+1).distance) {
                    Pathes temp = pathesList.get(r);
                    pathesList.set(r,pathesList.get(r+1));
                    pathesList.set(r+1,temp);
                }
            }
        }
        for (int i=0;i<pathesList.size();i++){
            System.out.println("Путь: "+pathesList.get(i).path+" Расстояние: "+pathesList.get(i).distance);
        }
        pathesList.clear();
    }

    public  void  showMinPath(int start, int finish){
        findPathes(start,finish);
        for(int i=1;i<pathesList.size();i++) {
            for (int r = 0; r < pathesList.size() - i; r++) {
                if (pathesList.get(r).distance > pathesList.get(r+1).distance) {
                    Pathes temp = pathesList.get(r);
                    pathesList.set(r,pathesList.get(r+1));
                    pathesList.set(r+1,temp);
                }
            }
        }
        if(!hascycle)
            if(pathesList.size()!=0)
                System.out.println("Min Путь: "+pathesList.get(0).path+" Min Расстояние: "+pathesList.get(0).distance);
            else
                System.out.println("Пути нет");
        if(!hascycle)
            System.out.println("Min Путь: "+pathesList.get(0).path+" Min Расстояние: "+pathesList.get(0).distance);
        pathesList.clear();
        hascycle=false;


    }
    public  void  showMaxPath(int start, int finish){
        findPathes(start,finish);
        for(int i=1;i<pathesList.size();i++) {
            for (int r = 0; r < pathesList.size() - i; r++) {
                if (pathesList.get(r).distance > pathesList.get(r+1).distance) {
                    Pathes temp = pathesList.get(r);
                    pathesList.set(r,pathesList.get(r+1));
                    pathesList.set(r+1,temp);
                }
            }
        }
        if(!hascycle)
            if(pathesList.size()!=0)
                System.out.println("Min Путь: "+pathesList.get(0).path+" Min Расстояние: "+pathesList.get(0).distance);
            else
                System.out.println("Пути нет");
        if(!hascycle)
            System.out.println("Max Путь: "+pathesList.get(pathesList.size()-1).path+" Max Расстояние: "+pathesList.get(pathesList.size()-1).distance);
        pathesList.clear();
        hascycle=false;
    }
    private void findPathes(int start, int finish){
        this.start=start;
        if(start!=0){
            Vertex temp=vertexList.get(0);
            vertexList.set(0,vertexList.get(start));
            vertexList.set(start,temp);
            flag=true;
        }
        if(!isHasCycle()){
            this.finish=finish;
            findPathes(vertexList.get(0));
            path="";
            distans=0;
        }else {
            System.out.println("Граф содержит цикл");
        }
        if(flag){
            Vertex temp=vertexList.get(0);
            vertexList.set(0,vertexList.get(start));
            vertexList.set(start,temp);
            flag=false;
        }
    }
    private void findPathes(Vertex vertex) {
        path+=vertex.label+" ";
        for(int i = 0; i<vertex.ConnectedDirPars.size(); i++){
            distans+=vertex.ConnectedDirPars.get(i).distance;
            if(vertex.ConnectedDirPars.get(i).childVert.equals(vertexList.get(finish))){
                path+=vertex.ConnectedDirPars.get(i).childVert.label+" ";
                pathesList.add(new Pathes(path,distans));
                distans-=vertex.ConnectedDirPars.get(i).distance;
                path=path.substring(0,path.length()-2);
            }
            if(vertex.ConnectedDirPars.get(i).childVert!=vertexList.get(finish)){
                findPathes(vertex.ConnectedDirPars.get(i).childVert);
                distans-=vertex.ConnectedDirPars.get(i).distance;
                path=path.substring(0,path.length()-2);
            }
        }
    }

    public char center() {
        Integer[][] arr = new Integer[vertexList.size()][vertexList.size()];
        for (int i = 0; i < arr.length; i++) {
            for (int j = 0; j < arr.length; j++) {
                int temp=-1;
                int pos=0;
                if(j<vertexList.get(i).ConnectedDirPars.size()){
                    for (int k=0;k<vertexList.size();k++){
                        if(vertexList.get(k).equals(vertexList.get(i).ConnectedDirPars.get(j).childVert)){
                            temp=vertexList.get(i).ConnectedDirPars.get(j).distance;
                            pos=k;
                        }
                    }
                }
                if(temp==-1){
                    arr[i][pos]=null;
                }else {
                    arr[i][pos]=temp;
                }
            }
        }

        for (int k = 0; k < arr.length; k++) {
            for (int i = 0; i < arr.length; i++) {
                for (int j = 0; j < arr.length; j++) {
                    if (arr[i][k] != null && arr[k][j] != null) {
                        if (arr[i][j] == null || arr[i][j] > arr[i][k] + arr[k][j]) {
                            arr[i][j] = arr[i][k] + arr[k][j];
                        }
                    }
                }
            }
        }

        Integer[] max = new Integer[arr.length];
        for (int i = 0; i < arr.length; i++) {
            int maximym=-1;
            for (int j = 0; j < arr.length; j++) {
                if(arr[j][i]!=null && arr[j][i]>maximym){
                    maximym=arr[j][i];
                }
            }
            if(maximym!=-1){
                max[i]=maximym;
            }else {
                max[i]=null;
            }

        }
        int min=INF;
        int middle=-1;

        for (int i=0;i<max.length;i++){
            if (max[i]!=null && max[i]<min){
                min=max[i];
                middle=i;
            }
        }
        return vertexList.get(middle).label;
    }



    public boolean isHasCycle(){
        isHasCycle(vertexList.get(0));
        return hascycle;
    }
    private void isHasCycle(Vertex vertex){
        vertex.isBlack=true;
        for(int i = 0; i<vertex.ConnectedDirPars.size(); i++){
            if(vertex.ConnectedDirPars.get(i).childVert.isBlack){
                hascycle=true;
                return ;
            }
            isHasCycle(vertex.ConnectedDirPars.get(i).childVert);
        }
        vertex.isBlack=false;
    }
}

class DistPar
{
    public int distance;
    public Vertex childVert;
    public DistPar(Vertex childVert,int distance)
    {
        this.distance = distance;
        this.childVert=childVert;
    }
}
class Pathes {
    public String path;
    public int distance;

    public Pathes(String path, int distance) {
        this.path = path;
        this.distance = distance;
    }
}

class Vertex {
    public char label;
    public ArrayList<DistPar> ConnectedDirPars;
    public boolean isBlack;
    public Vertex(char lab)
    {
        label = lab;
        ConnectedDirPars =new ArrayList<>();
        isBlack=false;
    }
}
